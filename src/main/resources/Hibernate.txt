Hibernate
Framework
- is an Object/Relational Mapping (ORM)
solution for Java environments.
-- The term ORM refers to the technique of mapping data between an object model
representation to a relational data model representation.

Takes care of
mapping from    Classes => Tables
        Java data types => SQL data types

Provides
  - data query
  - retrieval facilities

Hibernate Interfaces
    - SessionFactory
      *a thread safe (and immutable) representation of the mapping of the application domain model
       to a database;
      *very expensive to create;
      *for any given database, the application should have only one associated SessionFactory
      *maintains services that Hibernate uses across all Session(s).
    - The EntityManagerFactory
      = JPA equivalent => SessionFactory
      basically those two converge into the same SessionFactory implementation.
    - Session
      *single threaded, short lived object conceptually
       modeling a "Unit of Work";
      *JPA nomenclature - is represented by an EntityManager
      *wraps a JDBC Connection
      *acts as a factory for Transaction instances
    - Transaction
      *single threaded, short lived object
      *used to demarcate individual physical transaction boundaries
    - EntityTransaction
      *is the JPA equivalent
      *both act as an abstraction API to isolate the application
      from the underlying transaction system in use (JDBC or JTA)

Hibernate - Domain model
     - is the central character in an ORM
     - Hibernate works best if these classes follow the Plain Old Java Object /
      JavaBean programming model
        = ordinary Java object
          https://en.wikipedia.org/wiki/Plain_old_Java_object
          *It is an ordinary Java object, not bound by any special restriction other than those
            forced by the Java Language Specification and not requiring any class path. POJOs are
            used for increasing the readability and re-usability of a program.
     - Hibernate understands both the Java and JDBC representations of application data
     - the function of a Hibernate type
        = The ability to read/write this data from/to the database

Hibernate - types
• value types
    basic types
    embeddable types
    collection types
• entity types
https://www.tutorialspoint.com/hibernate/hibernate_mapping_types.htm
    -Basic value types- usually map a single database column, to a single (non aggregated) Java type

Entity requirements(by JPA 2.1 specification)
        https://www.tutorialspoint.com/jpa/jpa_introduction.htm
•class must have a public or protected no argument constructor .
    It may define additional constructors as well
•class must be a top level class
•An enum or interface may not be designated as an entity
•class must not be final.
    No methods or persistent instance variables of the entity class may be final
•If an entity instance is to be used remotely as a detached object, the entity class
    must implement the Serializable interface

•class must be annotated with the Entity annotation
•abstract and concrete classes can be => entities.
    Entities may extend => non entity classes as well as entity classes,
    non entity classes may extend => entity classes.
•The persistent state of an entity is represented by instance variables,
    An instance variable must be directly accessed only from within the methods of the entity
        by the entity instance itself.
    The state of the entity is available to clients only through the entity’s accessor
        methods (getter/setter methods) or other business methods.

Entity requirements(by Hibernate)
•class must have a no argument constructor
    which may be public, protected or package visibility
    It may define additional constructors as well
•class need not be a top level class
•can persist final classes or classes with final persistent state accessor (getter/setter)
methods
    it is generally not a good idea as doing so will stop Hibernate from being able to
generate proxies for lazy loading the entity
•Hibernate does not restrict the application developer from exposing instance
variables and reference them from outside the entity class itself . The
        https://www.geeksforgeeks.org/equals-hashcode-methods-java/
•class that acts as an identifier must implement equals hashCode
based on the id values

https://en.wikipedia.org/wiki/View_(SQL)